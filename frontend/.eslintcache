[{"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/index.js":"1","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/App.js":"2","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/splash.jsx":"3","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/gameView.jsx":"4","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/game.jsx":"5","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/classes/board.js":"6","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/board.jsx":"7","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/classes/player.js":"8","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/classes/boneyard.js":"9","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/bone.jsx":"10","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/hand.jsx":"11","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/arena.jsx":"12","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/allDominos.jsx":"13","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/otherHands.jsx":"14","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/classes/bone.js":"15","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/chat/join.js":"16","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/chat/chat.jsx":"17","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/chat/chatMsg.jsx":"18","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/chat/chatContext.jsx":"19","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/constructBone.jsx":"20"},{"size":587,"mtime":1610390935912,"results":"21","hashOfConfig":"22"},{"size":726,"mtime":1609970509930,"results":"23","hashOfConfig":"22"},{"size":3342,"mtime":1609970509944,"results":"24","hashOfConfig":"22"},{"size":231,"mtime":1609970509943,"results":"25","hashOfConfig":"22"},{"size":7786,"mtime":1610674328279,"results":"26","hashOfConfig":"22"},{"size":15962,"mtime":1610674044742,"results":"27","hashOfConfig":"22"},{"size":4807,"mtime":1610562665535,"results":"28","hashOfConfig":"22"},{"size":1314,"mtime":1610674282963,"results":"29","hashOfConfig":"22"},{"size":1669,"mtime":1609261284051,"results":"30","hashOfConfig":"22"},{"size":6363,"mtime":1610429329913,"results":"31","hashOfConfig":"22"},{"size":1714,"mtime":1610390945671,"results":"32","hashOfConfig":"22"},{"size":14842,"mtime":1610429259791,"results":"33","hashOfConfig":"22"},{"size":3444,"mtime":1609970509942,"results":"34","hashOfConfig":"22"},{"size":8189,"mtime":1610390945671,"results":"35","hashOfConfig":"22"},{"size":621,"mtime":1609970509940,"results":"36","hashOfConfig":"22"},{"size":912,"mtime":1609970509942,"results":"37","hashOfConfig":"22"},{"size":1742,"mtime":1609970509941,"results":"38","hashOfConfig":"22"},{"size":172,"mtime":1609261284052,"results":"39","hashOfConfig":"22"},{"size":717,"mtime":1609971631914,"results":"40","hashOfConfig":"22"},{"size":682,"mtime":1610390945670,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"218tk5",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/index.js",[],["87","88"],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/App.js",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/splash.jsx",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/gameView.jsx",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/game.jsx",["89","90","91","92"],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/classes/board.js",["93","94","95"],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/board.jsx",["96","97"],"import React from \"react\";\nimport Konva from \"konva\"\nimport { Stage, Layer, Group} from 'react-konva';\nimport Bone from \"./bone\"\nimport Hand from \"./hand\"\nimport Arena from \"./arena\"\nimport OtherHands from \"./otherHands\"\n\nimport { allDominos } from \"./allDominos\"\n\n\nclass Board extends React.Component {\n\n    componentDidMount(){\n        // this.getNums()\n    }\n\n    attachImages(){\n        // const\n    }\n\n    \n\n    render(){\n        const boardDimen = 900;\n        const boneWidth = 30;\n        const boneHeight = 60;\n        const boneIsRevYPos = (boneWidth / 2);\n        const boneNotRevYPos = ((boneWidth / 2) * 3);\n\n        const {board} = this.props;\n\n        const capDom = [<Bone key={\"cd\"}\n                    draggable={true}\n                    x={0}\n                    width={boneWidth}\n                    height={boneHeight}\n                    src={allDominos[\"cd\"]}\n                    rotation={0}\n                    inArena={true} />]\n\n                    // offsetX={boneWidth / 2}\n                    // offsetY={boneHeight / 2}\n\n        \n\n        // these 3 lines are required to center the arena in the middle of the board\n        // for Konva Group\n        const currArenaLength = board.arena.length;\n        const offSetCenterArena = ((currArenaLength / 2) * boneWidth);\n        const startBoxforArena = ((boardDimen / 2) - offSetCenterArena);\n        const startHeightArena = (boardDimen / 2) - boneHeight;\n\n        // the math on the right side is the same as the commented code below. \n        // 9 / 2 is a random scale factor that looked nice.\n        const maxLeftStartBoxforArena = ((boardDimen / 2) - (( ((boneWidth / 2) + boneWidth) / 10 ) * boneWidth));\n        // const maxLeftStartBoxforArena = ((boardDimen / 2) - (( 9 / 2 ) * boneWidth));\n\n\n        const boneValToString = (boneVal) => {\n            let firstNumStr = boneVal[0].toString();\n            let secondNumStr = boneVal[1].toString();\n            let boneValStrA = firstNumStr + secondNumStr;\n            let boneValStrB = secondNumStr + firstNumStr;\n\n            // The Idea here is the Top num is always on the left even when\n            // rotated -90 Degrees.\n            // ~\n            // If the bone has been rotated then it is boneValStrB and we\n            // can add rotational Logic to the front End.\n            return [boneValStrA, boneValStrB]\n        }\n\n        \n\n            \n        // These will determine the length of the playerID owner's hand and render them\n        // centered in the right place. We use startBoxforHand to pick a \n        // startX for the rendering of <Hand></Hand>\n        const currHandLength = board.currentPlayer.hand.length\n        // mult by 40 because width of bone is 30 plus 10 more pixels of space\n        const offSetCenter = ((currHandLength / 2) * boneWidth + (boneWidth / 3))  \n\n        const startBoxforHand = ((boardDimen / 2) - offSetCenter)\n\n            \n           \n            // the arena is simply to show the current pieces in play\n        return (\n            <div className=\"board-game-container\">\n            <Stage width={boardDimen} height={boardDimen}>\n                <Layer>\n                    {/* y will shift up as length grows until length is 13 then shifting stops */}\n                    <Group x={currArenaLength <= 9 ? startBoxforArena : maxLeftStartBoxforArena} \n                    y={currArenaLength <= 8 ? startHeightArena :\n                    currArenaLength >= 9 && currArenaLength <= 13 ? startHeightArena - (boneHeight  * (currArenaLength - 8)) :\n                    startHeightArena - (boardDimen / 3) }>\n                        <Arena board={board} boardDimen={boardDimen}\n                         allDominos={allDominos} boneValToString={boneValToString}\n                         boneWidth={boneWidth} boneHeight={boneHeight}\n                         boneIsRevYPos={boneIsRevYPos}\n                         boneNotRevYPos={boneNotRevYPos}/>\n                    </Group>\n                    {/* <Group x={startBoxforArena} y={(boardDimen / 2) + 60}>\n                        {capDom}\n                    </Group> */}\n                    <OtherHands board={board} boardDimen={boardDimen} allDominos={allDominos}\n                    boneWidth={boneWidth} boneHeight={boneHeight} boneValToString={boneValToString}/>\n                    <Group x={startBoxforHand} y={boardDimen - boneHeight}>\n\n                        <Hand offSetCenter={offSetCenter} board={board}\n                        boneWidth={boneWidth} boneHeight={boneHeight} \n                        updateGame={this.props.updateGame} allDominos={allDominos}\n                        boneValToString={boneValToString}  />\n                    </Group>\n                </Layer>\n            </Stage>\n          </div>\n        );\n    }\n}\n\n\n\n\n\n\nexport default Board;","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/classes/player.js",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/classes/boneyard.js",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/bone.jsx",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/hand.jsx",["98"],"import React from \"react\";\nimport {Group} from 'react-konva';\nimport Bone from \"./bone\"\n\n\n\nclass Hand extends React.Component {\n\n\n    render(){\n        const {board, allDominos, boneValToString, offSetCenter,\n        boneWidth, boneHeight} = this.props;\n\n\n        // this will need to be changed to the axios player ID. \n        // SOLELY FOR TESTING...\n        let renderedHand = [];\n\n        if (board){\n\n            renderedHand = board.currentPlayer.hand.map((bone,idx) => {\n\n               const singleBoneVal =  boneValToString(bone.boneVal)[0]\n               const reactKeyVal = parseInt(singleBoneVal)\n               const initialX = 0;\n\n               //width of domino plus spacing\n               const width = (boneWidth + 10);\n\n                const pos = initialX + (width * idx);\n\n                return <Bone \n                x={pos} \n                width={boneWidth}\n                height={boneHeight}\n                updateGame={this.props.updateGame}\n                boneIdx={idx}\n                offSetCenter={offSetCenter}\n                draggable={true}\n                key={reactKeyVal}\n                src={allDominos[singleBoneVal]}\n                inArena={false}/>    \n            })\n\n        }\n\n         return(\n                <>          \n                 {renderedHand}\n                </>\n         )\n\n    }\n\n}\nexport default Hand;","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/arena.jsx",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/allDominos.jsx",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/otherHands.jsx",["99","100","101"],"import React from \"react\";\nimport {Group} from 'react-konva';\nimport Bone from \"./bone\"\n\n\n\nclass OtherHands extends React.Component {\n\n\n    render() {\n        const {board, boardDimen, boneWidth,\n            boneHeight, boneValToString, allDominos} = this.props;\n\n        const renderHandFn = (player, offSetCenter, playerIdx, currPlayerIdx) => {\n            // debugger\n            \n         const renderedHand = player.hand.map((bone,idx) => {\n\n            const singleBoneVal =  boneValToString(bone.boneVal)[0]\n            const reactKeyVal = parseInt(singleBoneVal + playerIdx)\n            const initialX = 0;\n            const initialY = 0;\n\n            //width of domino plus spacing\n            const width = boneWidth + 10;\n\n            let pos = initialX + (width * idx);\n\n            // debugger\n            \n            // if ((((currPlayerIdx % board.players.length) + 1) % board.players.length)  === playerIdx % board.players.length){\n            if (((currPlayerIdx + 1) % board.players.length)  === playerIdx % board.players.length){\n\n                pos = initialY + (width * idx);\n\n                // width and height are reversed because the bone is flat\n                return <Bone \n                x={0}\n                y={pos} \n                width={boneHeight}\n                height={boneWidth}\n                boneIdx={idx}\n                offSetCenter={offSetCenter}\n                draggable={true}\n                key={reactKeyVal}\n                src={allDominos[\"cdl\"]}\n                inArena={true}/> \n            } \n            else if(((currPlayerIdx + 2) % board.players.length) === playerIdx % board.players.length){\n            \n                return <Bone \n                x={pos}\n                y={0} \n                width={boneWidth}\n                height={boneHeight}\n                boneIdx={idx}\n                offSetCenter={offSetCenter}\n                draggable={true}\n                key={reactKeyVal}\n                src={allDominos[\"cdt\"]}\n                inArena={true}/> \n            }\n            else if(((currPlayerIdx + 3) % board.players.length) === playerIdx % board.players.length){\n                pos = initialY + (width * idx);\n\n                return <Bone \n                x={0}\n                y={pos} \n                width={boneHeight}\n                height={boneWidth}\n                boneIdx={idx}\n                offSetCenter={offSetCenter}\n                draggable={true}\n                key={reactKeyVal}\n                src={allDominos[\"cdr\"]}\n                inArena={true}/> \n            }\n               \n        })\n\n            return renderedHand\n        }\n\n        const currPlayerIdx = board.players.indexOf(board.currentPlayer);\n\n        const blankDominoToCoveredHands = (numPlayers, currPlayerIdx) => {\n            let player2Idx = null;\n            let player3Idx = null;\n            switch(numPlayers){\n                case 2:\n                    player2Idx = ((currPlayerIdx + 1) % board.players.length);\n                    return {[player2Idx]: \"cdt\",\n                            [currPlayerIdx]: \"cdt\"}\n                case 3:\n                     player2Idx = ((currPlayerIdx + 1) % board.players.length);\n                     player3Idx = ((currPlayerIdx + 2) % board.players.length);\n                    return {[player2Idx]: \"cdl\",\n                            [player3Idx]: \"cdt\",\n                            [currPlayerIdx]: \"cdt\"}\n                case 4:\n\n                default:\n                    return\n            }\n        }\n        \n        // allPlayers[someIdx]\n        //The important thing here is that the index to access allPlayers Obj will\n        // always match the index of the next player (p2) and beyond regardless of\n        // where the currentPlayer index is...\n        const allPlayersDataObj = (numPlayers, currPlayerIdx) => {\n            let allPlayers = {};\n\n            /* all the metadata necessary to populate the hidden hands\n               - offSetCenter is the midpoint of board minus the total width of all bones\n                   to center the hand on the board regardless of length\n                - startBoxforPlayerHand is the start x or start y of this div on\n                  the board. relative to board (x,y) @ (0,0)\n                - renderedHandPlayer is a collection of ImageNodes of the count \n                  of all bones in that players hand.\n            */\n            for(let i = currPlayerIdx; i < (currPlayerIdx + numPlayers); i++){\n                allPlayers[i % numPlayers] = {\n                    playerIdx: null,\n                    player: null,\n                    playerHand: null,\n                    offSetCenter: null,\n                    startBoxforPlayerHand: null,\n                    renderedHandPlayer: null\n                         \n                }\n            }\n\n            // this for loop builds out metadata per player to be accessed later \n            //by the function gnerateHands\n            for(let j = currPlayerIdx; j < (currPlayerIdx + numPlayers); j++){\n\n                allPlayers[j % numPlayers].playerIdx = (j % numPlayers);\n                allPlayers[j % numPlayers].player = board.players[allPlayers[j % numPlayers].playerIdx];\n                allPlayers[j % numPlayers].playerHand = allPlayers[j % numPlayers].player.hand;\n                allPlayers[j % numPlayers].offSetCenter = ((allPlayers[j % numPlayers].playerHand.length / 2) * 40);\n                allPlayers[j % numPlayers].startBoxforPlayerHand = ((boardDimen / 2) - allPlayers[j % numPlayers].offSetCenter);\n                allPlayers[j % numPlayers].renderedHandPlayer = renderHandFn(allPlayers[j % numPlayers].player,\n                         allPlayers[j % numPlayers].offSetCenter,\n                         allPlayers[j % numPlayers].playerIdx, currPlayerIdx)\n                \n                }\n\n            return allPlayers;\n\n        }\n\n        const allPlayers = allPlayersDataObj(board.players.length, currPlayerIdx)\n\n        const generateHands = (numPlayers, websocketsId) => {\n                // debugger\n            \n            // const player2Idx = ((currPlayerIdx + 1) % board.players.length);\n            // const player2 = board.players[player2Idx];\n            // const player2Hand = player2.hand;\n            // const offSetCenterP2 = ((player2Hand.length / 2) * 40);\n            // const startBoxforPlayer2Hand = ((boardDimen / 2) - offSetCenter);  \n\n            // const renderedHandplayer2 = renderHandFn(player2, offSetCenter, player2Idx, \"cdt\")\n            const player2Idx = ((currPlayerIdx + 1) % board.players.length);\n            const player3Idx = ((currPlayerIdx + 2) % board.players.length);\n            const player4Idx = ((currPlayerIdx + 3) % board.players.length);\n            switch(numPlayers){\n                case 2:\n        \n                    return <Group x={0} y={allPlayers[player2Idx].startBoxforPlayerHand}> \n                                {allPlayers[player2Idx].renderedHandPlayer}\n\n                            </Group>\n                case 3:\n                    \n                     return <Group x={0} y={0}>\n                                {/* player on left of board below */}\n                                <Group x={0} y={allPlayers[player2Idx].startBoxforPlayerHand}> \n                                    {allPlayers[player2Idx].renderedHandPlayer}\n                                </Group>\n                                {/* player on top of board below */}\n                                <Group x={allPlayers[player3Idx].startBoxforPlayerHand} y={0}>\n                                    {allPlayers[player3Idx].renderedHandPlayer}\n                                </Group>\n                            </Group>\n                case 4:\n                \n                    return <Group x={0} y={0}>\n                                {/* player on left of board below */}\n                                <Group x={0} y={allPlayers[player2Idx].startBoxforPlayerHand}> \n                                    {allPlayers[player2Idx].renderedHandPlayer}\n                                </Group>\n                                {/* player on top of board below */}\n                                <Group x={allPlayers[player3Idx].startBoxforPlayerHand} y={0}>\n                                    {allPlayers[player3Idx].renderedHandPlayer}\n                                </Group>\n                                {/* player on right of board below */}\n                                <Group x={boardDimen - boneHeight} y={allPlayers[player4Idx].startBoxforPlayerHand}>\n                                    {allPlayers[player4Idx].renderedHandPlayer}\n                                </Group>\n                           </Group>\n\n                default:\n                    return <Group></Group>\n            }\n\n        }\n        let handsToGenerate = null;\n        if(board){\n            handsToGenerate = generateHands(board.players.length);\n\n        }\n\n        return (\n            <>\n            {handsToGenerate}\n            </>\n        )\n    }\n}\n export default OtherHands;\n","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/classes/bone.js",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/chat/join.js",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/chat/chat.jsx",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/chat/chatMsg.jsx",["102"],"import React from 'react'\n\nexport default ({ name, message }) =>\n  <>\n    <div className=\"send-textarea\">\n      <strong>{name}:</strong> <em>{message}</em>\n    </div>\n  </>","/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/chat/chatContext.jsx",[],"/Users/vault/Desktop/AA work/Capicua/capicua/frontend/src/components/constructBone.jsx",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":4,"column":10,"nodeType":"109","messageId":"110","endLine":4,"endColumn":13},{"ruleId":"107","severity":1,"message":"111","line":5,"column":9,"nodeType":"109","messageId":"110","endLine":5,"endColumn":19},{"ruleId":"107","severity":1,"message":"112","line":187,"column":13,"nodeType":"109","messageId":"110","endLine":187,"endColumn":19},{"ruleId":"107","severity":1,"message":"113","line":188,"column":13,"nodeType":"109","messageId":"110","endLine":188,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":6,"column":1,"nodeType":"116","messageId":"117","endLine":17,"endColumn":2},{"ruleId":"118","severity":1,"message":"119","line":428,"column":58,"nodeType":"120","messageId":"121","endLine":428,"endColumn":59},{"ruleId":"118","severity":1,"message":"119","line":428,"column":74,"nodeType":"120","messageId":"121","endLine":428,"endColumn":75},{"ruleId":"107","severity":1,"message":"122","line":2,"column":8,"nodeType":"109","messageId":"110","endLine":2,"endColumn":13},{"ruleId":"107","severity":1,"message":"123","line":33,"column":15,"nodeType":"109","messageId":"110","endLine":33,"endColumn":21},{"ruleId":"107","severity":1,"message":"124","line":2,"column":9,"nodeType":"109","messageId":"110","endLine":2,"endColumn":14},{"ruleId":"125","severity":1,"message":"126","line":17,"column":58,"nodeType":"127","messageId":"128","endLine":17,"endColumn":60},{"ruleId":"107","severity":1,"message":"129","line":86,"column":15,"nodeType":"109","messageId":"110","endLine":86,"endColumn":40},{"ruleId":"130","severity":1,"message":"131","line":102,"column":17,"nodeType":"132","messageId":"133","endLine":103,"endColumn":27},{"ruleId":"134","severity":1,"message":"135","line":3,"column":1,"nodeType":"136","endLine":8,"endColumn":6},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'set' is defined but never used.","Identifier","unusedVar","'allDominos' is defined but never used.","'button' is defined but never used.","'endGameButton' is defined but never used.","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Konva' is defined but never used.","'capDom' is assigned a value but never used.","'Group' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'blankDominoToCoveredHands' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]