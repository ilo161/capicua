[{"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/index.js":"1","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/App.js":"2","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/game.jsx":"3","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chat/chat.jsx":"4","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/splash.jsx":"5","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/gameView.jsx":"6","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chat/chatContext.jsx":"7","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chat/chatMsg.jsx":"8","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/board.js":"9","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/board.jsx":"10","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/player.js":"11","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/boneyard.js":"12","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/allDominos.jsx":"13","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/hand.jsx":"14","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/bone.jsx":"15","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/bone.js":"16","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chat/join.js":"17","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/arena.jsx":"18","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/otherHands.jsx":"19"},{"size":574,"mtime":1609273631356,"results":"20","hashOfConfig":"21"},{"size":726,"mtime":1609968651232,"results":"22","hashOfConfig":"21"},{"size":2103,"mtime":1609999298840,"results":"23","hashOfConfig":"21"},{"size":1742,"mtime":1609262695260,"results":"24","hashOfConfig":"21"},{"size":3342,"mtime":1609968651242,"results":"25","hashOfConfig":"21"},{"size":231,"mtime":1609273631354,"results":"26","hashOfConfig":"21"},{"size":717,"mtime":1609262921558,"results":"27","hashOfConfig":"21"},{"size":172,"mtime":1609260917693,"results":"28","hashOfConfig":"21"},{"size":12233,"mtime":1610001120783,"results":"29","hashOfConfig":"21"},{"size":4546,"mtime":1609971997659,"results":"30","hashOfConfig":"21"},{"size":1817,"mtime":1609969282458,"results":"31","hashOfConfig":"21"},{"size":1669,"mtime":1609200386361,"results":"32","hashOfConfig":"21"},{"size":3444,"mtime":1609969282459,"results":"33","hashOfConfig":"21"},{"size":1364,"mtime":1609969282463,"results":"34","hashOfConfig":"21"},{"size":6682,"mtime":1609971997661,"results":"35","hashOfConfig":"21"},{"size":621,"mtime":1609969282456,"results":"36","hashOfConfig":"21"},{"size":912,"mtime":1609968651237,"results":"37","hashOfConfig":"21"},{"size":18974,"mtime":1610000371935,"results":"38","hashOfConfig":"21"},{"size":9087,"mtime":1609969282465,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1cdrc73",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/index.js",[],["85","86"],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/App.js",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/game.jsx",["87"],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chat/chat.jsx",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/splash.jsx",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/gameView.jsx",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chat/chatContext.jsx",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chat/chatMsg.jsx",["88"],"import React from 'react'\n\nexport default ({ name, message }) =>\n  <>\n    <div className=\"send-textarea\">\n      <strong>{name}:</strong> <em>{message}</em>\n    </div>\n  </>","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/board.js",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/board.jsx",["89","90"],"import React from \"react\";\nimport Konva from \"konva\"\nimport { Stage, Layer, Group} from 'react-konva';\nimport Bone from \"./bone\"\nimport Hand from \"./hand\"\nimport Arena from \"./arena\"\nimport OtherHands from \"./otherHands\"\n\nimport { allDominos } from \"./allDominos\"\n\n\nclass Board extends React.Component {\n    constructor(props){\n        super(props)\n\n\n    }\n\n    componentDidMount(){\n        // this.getNums()\n    }\n\n    attachImages(){\n        // const\n    }\n\n    \n\n    render(){\n        const boardDimen = 900;\n        const boneWidth = 30;\n        const boneHeight = 60;\n        const boneIsRevYPos = (boneWidth / 2);\n        const boneNotRevYPos = ((boneWidth / 2) * 3);\n\n        const {board} = this.props;\n\n        const capDom = [<Bone key={\"cd\"}\n                    draggable={true}\n                    x={0}\n                    width={boneWidth}\n                    height={boneHeight}\n                    offsetX={boneWidth / 2}\n                    offsetY={boneHeight / 2}\n                    src={allDominos[\"cd\"]}\n                    rotation={0}\n                    inArena={true} />]\n\n        \n\n        // these 3 lines are required to center the arena in the middle of the board\n        // for Konva Group\n        const currArenaLength = board.arena.length\n        const offSetCenterArena = ((currArenaLength / 2) * boneWidth)  // mult by 40\n        const startBoxforArena = ((boardDimen / 2) - offSetCenterArena)\n\n        const boneValToString = (boneVal) => {\n            let firstNumStr = boneVal[0].toString();\n            let secondNumStr = boneVal[1].toString();\n            let boneValStrA = firstNumStr + secondNumStr;\n            let boneValStrB = secondNumStr + firstNumStr;\n\n            // The Idea here is the Top num is always on the left even when\n            // rotated -90 Degrees.\n            // ~\n            // If the bone has been rotated then it is boneValStrB and we\n            // can add rotational Logic to the front End.\n            return [boneValStrA, boneValStrB]\n        }\n\n        \n\n            \n        // These will determine the length of the playerID owner's hand and render them\n        // centered in the right place. We use startBoxforHand to pick a \n        // startX for the rendering of <Hand></Hand>\n        const currHandLength = board.currentPlayer.hand.length\n        // mult by 40 because width of bone is 30 plus 10 more pixels of space\n        const offSetCenter = ((currHandLength / 2) * boneWidth + 10)  \n\n        const startBoxforHand = ((boardDimen / 2) - offSetCenter)\n\n            \n           \n            // the arena is simply to show the current pieces in play\n        return (\n            <div className=\"board-game-container\">\n            <Stage width={boardDimen} height={boardDimen}>\n                <Layer>\n                    <Group x={startBoxforArena} y={(boardDimen / 2) - boneHeight}>\n                        <Arena board={board} boardDimen={boardDimen}\n                         allDominos={allDominos} boneValToString={boneValToString}\n                         boneWidth={boneWidth} boneHeight={boneHeight}\n                         boneIsRevYPos={boneIsRevYPos}\n                         boneNotRevYPos={boneNotRevYPos}/>\n                    </Group>\n                    <Group x={startBoxforArena} y={(boardDimen / 2) + 60}>\n                        {capDom}\n                    </Group>\n                    <OtherHands board={board} boardDimen={boardDimen} allDominos={allDominos}\n                    boneWidth={boneWidth} boneHeight={boneHeight} boneValToString={boneValToString}/>\n                    <Group x={startBoxforHand} y={boardDimen - boneHeight}>\n\n                        <Hand offSetCenter={offSetCenter} board={board}\n                        boneWidth={boneWidth} boneHeight={boneHeight} \n                        updateGame={this.props.updateGame} allDominos={allDominos}\n                        boneValToString={boneValToString}  />\n                    </Group>\n                </Layer>\n            </Stage>\n          </div>\n        );\n    }\n}\n\n\n\n\n\n\nexport default Board;","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/player.js",["91"],"// import bone from './bone'\n// const Bone = require('bone')\n\n\n\n\n\nclass Player {\n    constructor(username, board, isAI) {\n      this.username = username;\n      this.points = 0;\n      this.hand = [];\n      this.isAI = isAI ? true : false;\n      this.board = board;\n      this.playerInput = undefined;\n      // this.getPlayerInput()\n\n     \n    }\n\n    \n\n      // probably the master function\n      //update NOT THE MASTER FUNCTON. node is async\n    getPlayerInput(correctAnswer){\n        this.revealHand();\n        this.playerInput = correctAnswer\n\n    }\n\n    //replaced canMove with hasPlayableBone()\n    hasPlayableBones(){\n        const canMakeMove = this.hand.some((bone) =>{\n            return this.board.isBonePlayable(bone);\n        });\n\n        if (!canMakeMove) return false;\n        return true\n    }\n\n    drawBone(){\n      const newBone = this.hand.push(this.board.boneyard.bones.pop())\n      console.log(`Player drew ${this.hand[this.hand.length-1].boneVal}`)\n    }\n\n    \n    revealHand(){\n      let handString = \"\"\n        this.hand.forEach(bone => {\n          handString += `[${bone.boneVal[0]}, ${bone.boneVal[1]}], `\n        })\n\n        console.log(`${this.username}'s Hand: `)\n\n        console.log(`${handString}`)\n        \n    }\n}\n\n// let p1 = new Player(\"Mike\", \"board\")\n\nexport default Player;\n  // module.exports = Player;\n\n\n  // removeFromHand(bone) {\n  //   for(let idx in this.hand) {\n  //     let bone = this.hand[idx];\n\n  //     if ((domino.top_number == domino.top_number && domino.bottom_number == domino.bottom_number)\n  //         // board [1:n] == hand [1:n] && board [n:2] == hand [n:2]  hand [[],[],[],[],[],[]]\n  //       ||\n  //       (domino.top_number == domino.bottom_number && domino.bottom_number == domino.top_number)) {\n  //         delete domino;\n  //       }\n  //   }\n  // }\n\n","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/boneyard.js",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/allDominos.jsx",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/hand.jsx",["92"],"import React from \"react\";\n\nimport {Group} from 'react-konva';\n// import useImage from 'use-image';\nimport Bone from \"./bone\"\n\n\n\nclass Hand extends React.Component {\n    // constructor(props){\n    //     super(props)\n\n\n\n    // }\n\n    render(){\n        const {board, allDominos, boneValToString, offSetCenter} = this.props;\n\n        // this will need to be changed to the axios player ID. \n        // SOLELY FOR TESTING...\n        let renderedHand = [];\n\n        if (board){\n\n            renderedHand = board.currentPlayer.hand.map((bone,idx) => {\n               // [\"34\"]\n               const singleBoneVal =  boneValToString(bone.boneVal)[0]\n               const reactKeyVal = parseInt(singleBoneVal)\n               const initialX = 0;\n\n               //width of domino plus spacing\n               const width = 30 + 10;\n\n                const pos = initialX + (width * idx);\n\n                return <Bone \n                x={pos} \n                updateGame={this.props.updateGame}\n                boneIdx={idx}\n                offSetCenter={offSetCenter}\n                draggable={true}\n                key={reactKeyVal}\n                src={allDominos[singleBoneVal]}/>    \n            })\n\n        }\n         return(\n                   <>          \n                 {renderedHand}\n                </>\n         )\n\n    }\n\n}\nexport default Hand;","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/bone.jsx",["93","94"],"import React from \"react\";\nimport {Image} from 'react-konva';\n\nclass Bone extends React.Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n             image: null,\n             draggable: null,\n             offSetCenter: null,\n             updateGame: null,\n             boneIdx: null,\n             rotation: null,\n             inArena: null,\n             x: null,\n             y: null,\n             width: null,\n             height: null,\n             offsetX: this.props.offsetX,\n             offsetY: this.props.offsetY\n        };\n\n\n    }\n    \n  componentDidMount() {\n\n    debugger\n    // this.to({\n    //   scaleX: -this.scaleX(),\n    // });\n\n    this.loadImage();\n\n    // console.log(this.imageNode.getPosition());\n  }\n\n  componentDidUpdate(oldProps) {\n\n    if (oldProps.src !== this.props.src) {\n      this.loadImage();\n    } else if(oldProps.x !== this.props.x){\n      this.loadImage();\n    } \n    // oldProps.x\n    // this.props.x\n  }\n\n  componentWillUnmount() {\n    this.image.removeEventListener('load', this.handleLoad);\n  }\n\n  loadImage() {\n    // save to \"this\" to remove \"load\" handler on unmount\n    this.image = new window.Image();\n    this.image.src = this.props.src;\n    this.image.addEventListener('load', this.handleLoad);\n  }\n\n  handleLoad = () => {\n    // after setState react-konva will update canvas and redraw the layer\n    // because \"image\" property is changed\n    // debugger\n    this.setState({\n      image: this.image,\n      draggable: this.props.draggable,\n      offSetCenter: this.props.offSetCenter,\n      updateGame: this.props.updateGame,\n      boneIdx: this.props.boneIdx,\n      rotation: this.props.rotation,\n      inArena: this.props.inArena,\n      x: this.props.x,\n      y: this.props.y,\n      width: this.props.width,\n      height: this.props.height,\n      offsetX: this.props.offsetX,\n      offsetY: this.props.offsetY\n    });\n    // if you keep same image object during source updates\n    // you will have to update layer manually:\n    this.imageNode.getLayer().batchDraw();\n  };\n\n\n  mouseDownStartCoord(e){\n\n    console.log(`MDX: ${e.target.attrs.x}`)\n    // console.log(`MDY: ${e.target.attrs.y}`)\n    console.log(\"------\")\n  }\n\n  // decides where the player wants to play\n  mouseUpCoord(e, updateGame) {\n        // if(e.target.attrs.y > 150 && e.target.attrs.x > 150){\n        //     e.target.attrs.draggable = false;\n        // }  \n        // \n        const xPosPlay = e.target.attrs.x \n        const center = e.target.attrs.offSetCenter\n        //orig below\n        // const boneIdx = e.target.attrs.boneIdx\n        const boneIdx = e.target.index\n        const yCoord = e.target.attrs.y\n        const onBoardXPos = e.target.absolutePosition().x;\n        const onBoardYPos = e.target.absolutePosition().y;\n        \n        console.log(`BoneIdxIs: ${e.target.attrs.boneIdx}`)\n\n        console.log(`Center: ${e.target.attrs.offSetCenter}`)\n        console.log(`X: ${e.target.attrs.x}`)\n        console.log(`Y: ${e.target.attrs.y}`)\n        //works below\n        // this.state.updateGame(xPosPlay, center, boneIdx)\n        // debugger\n\n        // Remember to remove the left side of IF statement\n        // for testing only\n        // ******************************\n        // ******************************\n        // ******************************\n        // ******************************\n        // ******************************\n        // ******************************\n        // ******************************\n        // if (!this.props.inArena && yCoord < -50){\n          // console.log()\n          //else if (x < 0 || x > 540 && y < 0 || y > 540){\n            // if ((onBoardXPos < 0 || onBoardXPos > 540)\n            // || (onBoardYPos < 0 || onBoardYPos > 540)) {\n            //   debugger\n            //   // this.handleLoad();\n            //   e.currentTarget.getLayer().batchDraw();\n            // }\n            // else\n             if (!this.props.inArena && yCoord < -50) {\n\n              updateGame(xPosPlay, center, boneIdx);\n            }\n            // console.log(e.target)\n    }\n\n    // if(x < 0 || x > 540 && y < 0 || y > 540){\n    //     this.handleLoad();\n    // }\n\n    slideUp(e){\n      debugger\n      // console.log(this.getPosition())\n      console.log(this.absolutePosition())\n      \n      if(!this.attrs.inArena){\n        // console.log(`X: ${e.target.attrs.x}`)\n        // console.log(`Y: ${e.target.attrs.y}`)\n        // console.log(this.getPosition())\n        // this.absolutePosition()... ^^\n        // setX\n        // setY\n        // scale (X,  Y) // scaleX, scaleY\n        // this.offsetX(20) // works in reverse.\n        // this.offsetY(-20) // works in reverse.\n\n        this.to({\n          scaleX: 1.2,\n          scaleY: 1.2,\n          y: -20,\n          duration: 0.2\n        });\n\n        \n\n        // console.log(this.getPosition())\n        this.getLayer().batchDraw();\n      }\n        \n    }\n\n    slideDown(e){\n      if(!this.attrs.inArena){\n          this.to({\n            scaleX: 1.0,\n            scaleY: 1.0,\n            y: 0,\n            duration: 0.2\n          });\n        this.getLayer().batchDraw();\n      }\n      \n    }\n\n\n  render() {\n\n\n    //old width=25 and height = 45\n    \n    return (\n      <Image\n        x={this.state.x}\n        y={this.state.y}\n        offSetCenter={this.state.offSetCenter}\n        image={this.state.image}\n        width={this.state.width}\n        height={this.state.height}\n        boneIdx={this.state.boneIdx}\n        draggable={this.state.draggable}\n        onMouseDown={this.mouseDownStartCoord}\n        onMouseOver={this.slideUp}\n        onMouseOut={this.slideDown}\n        onDragEnd={(e) => this.mouseUpCoord(e, this.state.updateGame)}\n        rotation={this.state.rotation}\n        inArena={this.state.inArena}\n        ref={node => {\n          this.imageNode = node;\n        }}\n      />\n    );\n  }\n}\n\n\n\n\n\n//         return (\n//             <div >\n//                 <Stage className=\"board-game-container\" width={500} height={500} >\n//                     <Layer>\n                        \n//                         {arr}\n//                         {/* <Image image={domino05} x={100} y={100} width={25} height={45}  /> */}\n//                         {/* <Text>HELLO</Text> */}\n//                         {/* <Rect x={140} y={450} width={200} height={50} fill=\"brown\" draggable=\"false\" /> */}\n                            \n//                     </Layer>\n//                 </Stage>\n//             </div>\n//         );\n//     }\n\n// }\nexport default Bone;\n\n\n\n\n\n","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/bone.js",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chat/join.js",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/arena.jsx",["95","96","97","98","99","100"],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/otherHands.jsx",["101","102","103"],"import React from \"react\";\nimport {Group} from 'react-konva';\nimport Bone from \"./bone\"\n\n\n\nclass OtherHands extends React.Component {\n\n\n    render() {\n        const {board, boardDimen, boneWidth,\n            boneHeight, boneValToString, allDominos} = this.props;\n\n        const renderHandFn = (player, offSetCenter, playerIdx, currPlayerIdx) => {\n            // debugger\n            \n         const renderedHand = player.hand.map((bone,idx) => {\n\n            const singleBoneVal =  boneValToString(bone.boneVal)[0]\n            const reactKeyVal = parseInt(singleBoneVal + playerIdx)\n            const initialX = 0;\n            const initialY = 0;\n\n            //width of domino plus spacing\n            const width = boneWidth + 10;\n\n            let pos = initialX + (width * idx);\n\n            // debugger\n            \n            // if ((((currPlayerIdx % board.players.length) + 1) % board.players.length)  === playerIdx % board.players.length){\n            if (((currPlayerIdx + 1) % board.players.length)  === playerIdx % board.players.length){\n\n                pos = initialY + (width * idx);\n\n                // width and height are reversed because the bone is flat\n                return <Bone \n                x={0}\n                y={pos} \n                width={boneHeight}\n                height={boneWidth}\n                boneIdx={idx}\n                offSetCenter={offSetCenter}\n                draggable={true}\n                key={reactKeyVal}\n                src={allDominos[\"cdl\"]}\n                inArena={true}/> \n            } \n            else if(((currPlayerIdx + 2) % board.players.length) === playerIdx % board.players.length){\n            \n                return <Bone \n                x={pos}\n                y={0} \n                width={boneWidth}\n                height={boneHeight}\n                boneIdx={idx}\n                offSetCenter={offSetCenter}\n                draggable={true}\n                key={reactKeyVal}\n                src={allDominos[\"cdt\"]}\n                inArena={true}/> \n            }\n            else if(((currPlayerIdx + 3) % board.players.length) === playerIdx % board.players.length){\n                pos = initialY + (width * idx);\n\n                return <Bone \n                x={0}\n                y={pos} \n                width={boneHeight}\n                height={boneWidth}\n                boneIdx={idx}\n                offSetCenter={offSetCenter}\n                draggable={true}\n                key={reactKeyVal}\n                src={allDominos[\"cdr\"]}\n                inArena={true}/> \n            }\n               \n        })\n\n            return renderedHand\n        }\n\n        const currPlayerIdx = board.players.indexOf(board.currentPlayer);\n\n        const blankDominoToCoveredHands = (numPlayers, currPlayerIdx) => {\n            let player2Idx = null;\n            let player3Idx = null;\n            switch(numPlayers){\n                case 2:\n                    player2Idx = ((currPlayerIdx + 1) % board.players.length);\n                    return {[player2Idx]: \"cdt\",\n                            [currPlayerIdx]: \"cdt\"}\n                case 3:\n                     player2Idx = ((currPlayerIdx + 1) % board.players.length);\n                     player3Idx = ((currPlayerIdx + 2) % board.players.length);\n                    return {[player2Idx]: \"cdl\",\n                            [player3Idx]: \"cdt\",\n                            [currPlayerIdx]: \"cdt\"}\n                case 4:\n\n                default:\n                    return\n            }\n        }\n        \n        // allPlayers[someIdx]\n        //The important thing here is that the index to access allPlayers Obj will\n        // always match the index of the next player (p2) and beyond regardless of\n        // where the currentPlayer index is...\n        const allPlayersDataObj = (numPlayers, currPlayerIdx) => {\n            let allPlayers = {};\n\n            /* all the metadata necessary to populate the hidden hands\n               - offSetCenter is the midpoint of board minus the total width of all bones\n                   to center the hand on the board regardless of length\n                - startBoxforPlayerHand is the start x or start y of this div on\n                  the board. relative to board (x,y) @ (0,0)\n                - renderedHandPlayer is a collection of ImageNodes of the count \n                  of all bones in that players hand.\n            */\n            for(let i = currPlayerIdx; i < (currPlayerIdx + numPlayers); i++){\n                allPlayers[i % numPlayers] = {\n                    playerIdx: null,\n                    player: null,\n                    playerHand: null,\n                    offSetCenter: null,\n                    startBoxforPlayerHand: null,\n                    renderedHandPlayer: null\n                         \n                }\n            }\n\n            // this for loop builds out metadata per player to be accessed later \n            //by the function gnerateHands\n            for(let j = currPlayerIdx; j < (currPlayerIdx + numPlayers); j++){\n\n                allPlayers[j % numPlayers].playerIdx = (j % numPlayers);\n                allPlayers[j % numPlayers].player = board.players[allPlayers[j % numPlayers].playerIdx];\n                allPlayers[j % numPlayers].playerHand = allPlayers[j % numPlayers].player.hand;\n                allPlayers[j % numPlayers].offSetCenter = ((allPlayers[j % numPlayers].playerHand.length / 2) * 40);\n                allPlayers[j % numPlayers].startBoxforPlayerHand = ((boardDimen / 2) - allPlayers[j % numPlayers].offSetCenter);\n                allPlayers[j % numPlayers].renderedHandPlayer = renderHandFn(allPlayers[j % numPlayers].player,\n                         allPlayers[j % numPlayers].offSetCenter,\n                         allPlayers[j % numPlayers].playerIdx, currPlayerIdx)\n                \n                }\n\n            return allPlayers;\n\n        }\n\n        const allPlayers = allPlayersDataObj(board.players.length, currPlayerIdx)\n\n        const generateHands = (numPlayers, websocketsId) => {\n                // debugger\n            \n            // const player2Idx = ((currPlayerIdx + 1) % board.players.length);\n            // const player2 = board.players[player2Idx];\n            // const player2Hand = player2.hand;\n            // const offSetCenterP2 = ((player2Hand.length / 2) * 40);\n            // const startBoxforPlayer2Hand = ((boardDimen / 2) - offSetCenter);  \n\n            // const renderedHandplayer2 = renderHandFn(player2, offSetCenter, player2Idx, \"cdt\")\n            const player2Idx = ((currPlayerIdx + 1) % board.players.length);\n            const player3Idx = ((currPlayerIdx + 2) % board.players.length);\n            const player4Idx = ((currPlayerIdx + 3) % board.players.length);\n            switch(numPlayers){\n                case 2:\n        \n                    return <Group x={0} y={allPlayers[player2Idx].startBoxforPlayerHand}> \n                                {allPlayers[player2Idx].renderedHandPlayer}\n\n                            </Group>\n                case 3:\n                    \n                     return <Group x={0} y={0}>\n                                {/* player on left of board below */}\n                                <Group x={0} y={allPlayers[player2Idx].startBoxforPlayerHand}> \n                                    {allPlayers[player2Idx].renderedHandPlayer}\n                                </Group>\n                                {/* player on top of board below */}\n                                <Group x={allPlayers[player3Idx].startBoxforPlayerHand} y={0}>\n                                    {allPlayers[player3Idx].renderedHandPlayer}\n                                </Group>\n                            </Group>\n                case 4:\n                \n                    return <Group x={0} y={0}>\n                                {/* player on left of board below */}\n                                <Group x={0} y={allPlayers[player2Idx].startBoxforPlayerHand}> \n                                    {allPlayers[player2Idx].renderedHandPlayer}\n                                </Group>\n                                {/* player on top of board below */}\n                                <Group x={allPlayers[player3Idx].startBoxforPlayerHand} y={0}>\n                                    {allPlayers[player3Idx].renderedHandPlayer}\n                                </Group>\n                                {/* player on right of board below */}\n                                <Group x={boardDimen - boneHeight} y={allPlayers[player4Idx].startBoxforPlayerHand}>\n                                    {allPlayers[player4Idx].renderedHandPlayer}\n                                </Group>\n                           </Group>\n\n                default:\n                    return <Group></Group>\n            }\n\n        }\n        let handsToGenerate = null;\n        if(board){\n            handsToGenerate = generateHands(board.players.length);\n\n        }\n\n        return (\n            <>\n            {handsToGenerate}\n            </>\n        )\n    }\n}\n export default OtherHands;\n",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":34,"column":45,"nodeType":"110","messageId":"111","endLine":34,"endColumn":87},{"ruleId":"112","severity":1,"message":"113","line":3,"column":1,"nodeType":"114","endLine":8,"endColumn":6},{"ruleId":"115","severity":1,"message":"116","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":13},{"ruleId":"119","severity":1,"message":"120","line":13,"column":5,"nodeType":"121","messageId":"122","endLine":17,"endColumn":6},{"ruleId":"115","severity":1,"message":"123","line":42,"column":13,"nodeType":"117","messageId":"118","endLine":42,"endColumn":20},{"ruleId":"115","severity":1,"message":"124","line":2,"column":9,"nodeType":"117","messageId":"118","endLine":2,"endColumn":14},{"ruleId":"115","severity":1,"message":"125","line":107,"column":15,"nodeType":"117","messageId":"118","endLine":107,"endColumn":26},{"ruleId":"115","severity":1,"message":"126","line":108,"column":15,"nodeType":"117","messageId":"118","endLine":108,"endColumn":26},{"ruleId":"115","severity":1,"message":"116","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":13},{"ruleId":"115","severity":1,"message":"127","line":16,"column":52,"nodeType":"117","messageId":"118","endLine":16,"endColumn":62},{"ruleId":"128","severity":1,"message":"129","line":93,"column":51,"nodeType":"130","messageId":"131","endLine":93,"endColumn":53},{"ruleId":"115","severity":1,"message":"132","line":236,"column":23,"nodeType":"117","messageId":"118","endLine":236,"endColumn":34},{"ruleId":"128","severity":1,"message":"133","line":335,"column":25,"nodeType":"134","messageId":"135","endLine":335,"endColumn":31},{"ruleId":"136","severity":1,"message":"137","line":345,"column":17,"nodeType":"138","messageId":"139","endLine":457,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":17,"column":58,"nodeType":"130","messageId":"131","endLine":17,"endColumn":60},{"ruleId":"115","severity":1,"message":"140","line":86,"column":15,"nodeType":"117","messageId":"118","endLine":86,"endColumn":40},{"ruleId":"141","severity":1,"message":"142","line":102,"column":17,"nodeType":"143","messageId":"144","endLine":103,"endColumn":27},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Konva' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'newBone' is assigned a value but never used.","'Group' is defined but never used.","'onBoardXPos' is assigned a value but never used.","'onBoardYPos' is assigned a value but never used.","'boardDimen' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'shiftDown45' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'blankDominoToCoveredHands' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-global-assign","no-unsafe-negation"]