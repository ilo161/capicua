[{"/Users/yangel/Desktop/capicua/capicua/frontend/src/classes/boneyard.js":"1","/Users/yangel/Desktop/capicua/capicua/frontend/src/components/game.jsx":"2","/Users/yangel/Desktop/capicua/capicua/frontend/src/App.js":"3","/Users/yangel/Desktop/capicua/capicua/frontend/src/classes/board.js":"4","/Users/yangel/Desktop/capicua/capicua/frontend/src/classes/player.js":"5","/Users/yangel/Desktop/capicua/capicua/frontend/src/components/bone.jsx":"6","/Users/yangel/Desktop/capicua/capicua/frontend/src/components/board.jsx":"7","/Users/yangel/Desktop/capicua/capicua/frontend/src/classes/bone.js":"8","/Users/yangel/Desktop/capicua/capicua/frontend/src/components/allDominos.jsx":"9","/Users/yangel/Desktop/capicua/capicua/frontend/src/components/chatBox.jsx":"10","/Users/yangel/Desktop/capicua/capicua/frontend/src/index.js":"11"},{"size":1632,"mtime":1607975776814,"results":"12","hashOfConfig":"13"},{"size":815,"mtime":1607976497715,"results":"14","hashOfConfig":"13"},{"size":822,"mtime":1608063904977,"results":"15","hashOfConfig":"13"},{"size":8157,"mtime":1607975776814,"results":"16","hashOfConfig":"13"},{"size":1369,"mtime":1607975776815,"results":"17","hashOfConfig":"13"},{"size":1979,"mtime":1607975776816,"results":"18","hashOfConfig":"13"},{"size":3751,"mtime":1607975776815,"results":"19","hashOfConfig":"13"},{"size":461,"mtime":1607975776814,"results":"20","hashOfConfig":"13"},{"size":2969,"mtime":1607975776815,"results":"21","hashOfConfig":"13"},{"size":675,"mtime":1608153167300,"results":"22","hashOfConfig":"13"},{"size":377,"mtime":1607975776816,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"eftytw",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"27"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/yangel/Desktop/capicua/capicua/frontend/src/classes/boneyard.js",["52","53"],"const Bone = require(\"./bone.js\")\n\n\nclass Boneyard {\n    constructor(board){\n        this.bones = this.generateBoneyard()\n        this.shuffleBoneYard(this.bones)\n        \n    }\n\n    //Function generates a 2 length string of Integer values that match the face of a Domino/Bone\n    getUniqueDominoNums(){\n        let dominoStrs = []\n\n        let i;\n        let j;\n        for (let i = 0; i < 7; i++) {\n            for (let j = i; j < 7; j++) {\n                dominoStrs.push(`${i}${j}`)\n            }\n        }\n\n        return dominoStrs\n    }\n\n    // Function generates an array of objects. Objects are Bone Objects from Bone.js. 28 total\n    generateBoneyard(){\n        let allBones;\n        let dominoNums = this.getUniqueDominoNums()\n\n        allBones = dominoNums.map((numberPair, idx) => {\n            return new Bone([parseInt(numberPair[0]),  parseInt(numberPair[1])])\n        })\n\n        return allBones\n    }\n\n\n    //Shuffles existing boneyard so that it is random. All 28\n    shuffleBoneYard(allBones){\n\n            for(let i = allBones.length - 1; i > 0; i--){\n                const randomMathFloorIdx = Math.floor(Math.random() * i)\n                const lastIdx = allBones[i]\n                const temp = allBones[randomMathFloorIdx]  \n                allBones[i] = temp;\n                allBones[randomMathFloorIdx] = lastIdx\n            }\n                return allBones\n    }\n\n    isEmpty(){\n        if (this.bones.length === 0){\n            return true\n        }\n        return false\n    }\n\n    // draws last bone from boneyard\n    draw(){\n        return this.bones.pop()\n    }\n\n\n    \n}\nmodule.exports = Boneyard\n\n",["54","55"],"/Users/yangel/Desktop/capicua/capicua/frontend/src/components/game.jsx",["56"],"import React from \"react\";\nimport Board from \"./board\"\n\nconst BoardObject = require(\"../classes/board\")\nconst axiosPlayerObj = [{username: \"Steven\"}, {username: \"TinyPigOink!\"}]\n\nclass Game extends React.Component {\n    constructor(props){\n        super(props)\n        const board = new BoardObject(axiosPlayerObj)\n        this.state = {board: board}\n        // debugger\n        \n    }\n\n    componentDidMount(){\n        console.log(this.state.board)\n        debugger\n    }\n\n    updateGame(boneIndex, side) { {/* connected to Tile Component line 8 */}\n        \n        this.setState({ board: this.state.board });\n    }\n\n    render(){\n        \n\n        return (\n            <div className=\"board-container\">\n                <Board board={this.state.board}/>\n            </div>\n        )\n    }\n\n}\n\nexport default Game;","/Users/yangel/Desktop/capicua/capicua/frontend/src/App.js",[],"/Users/yangel/Desktop/capicua/capicua/frontend/src/classes/board.js",[],"/Users/yangel/Desktop/capicua/capicua/frontend/src/classes/player.js",[],"/Users/yangel/Desktop/capicua/capicua/frontend/src/components/bone.jsx",[],"/Users/yangel/Desktop/capicua/capicua/frontend/src/components/board.jsx",["57","58"],"import React from \"react\";\nimport { Stage, Layer} from 'react-konva';\nimport Bone from \"./bone\"\n\nimport { allDominos } from \"./allDominos\"\n\n\nconst fs = require(\"fs\");\n// import useImage from 'use-image';\n\n\n\n\nclass Board extends React.Component {\n    constructor(props){\n        super(props)\n\n\n    }\n\n    componentDidMount(){\n        // this.getNums()\n    }\n\n    attachImages(){\n        // const\n    }\n\n    \n\n    render(){\n\n        const {board} = this.props;\n            // const bone1 =  <Bone src={allDominos[\"01\"]} x={200} y={100}/>\n            const allDominosArr = Object.values(allDominos);\n\n            const boneValToString = (boneVal) => {\n                let firstNumStr = boneVal[0].toString();\n                let secondNumStr = boneVal[1].toString();\n                let boneValStrA = firstNumStr + secondNumStr;\n                let boneValStrB = secondNumStr + firstNumStr;\n\n                // The Idea here is the Top num is always on the left even when\n                // rotated -90 Degrees.\n                // ~\n                // If the bone has been rotated then it is boneValStrB and we\n                // can add rotational Logic to the front End.\n                return [boneValStrA, boneValStrB]\n            }\n            \n            \n            const arena = board.arena.map(bone => {\n\n                let boneStrArr = boneValToString(bone.boneVal);\n            \n\n                if(bone.isDouble()){\n                    return <Bone src={allDominos[boneStrArr[0]]} />\n                }\n                else if(allDominosArr.includes(boneStrArr[0])){\n                    //rotate once -90 degrees\n                   return <Bone src={allDominos[boneStrArr[0]]} />\n                } else {\n                    //boneVal has been reversed. Rotate 90 Degrees\n                    return <Bone src={allDominos[boneStrArr[1]]} />\n                }\n\n            })\n\n           \n            // the arena is simple to show the current pieces in play\n        return(\n            <div>\n               <Stage className=\"board-game-container\" width={500} height={500}>\n                    <Layer>\n\n                        {arena}\n\n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}\n\n //         // <img src={process.env.PUBLIC_URL + 'images/profile.svg'} />\n            //     // return <Bone src={domino66}/>\n            //     // return <Bone key={`${bone.boneVal[0]}${bone.boneVal[1]}`} src={process.env.PUBLIC_URL +'images/dominos_pieces_vector_svg/dominos_bone_6:6.svg'}/>\n            //     // return <Bone key={`${bone.boneVal[0]}${bone.boneVal[1]}`} src={\"%PUBLIC_URL%/images/dominos_pieces_vector_svg/dominos_bone_6:6.svg\"}/>\n            // })\n\n\n\n\n\n\n// const dominoPathA = \"/Users/Phidias/Documents/aaobReact/MERN/dominos_pieces_vector-svg\"\n// const dominoPathB = \"../dominos_pieces_vector-svg\"\n\n\n// let allFileNames = []\n// let allDominos = []\n\n// fs.readdir(dominoPathA, (err, files) => {\n//   if (err) {\n//     console.error(\"Could not list the directory.\", err);\n//     process.exit(1);\n//   }\n  \n//   files.forEach(file => {\n//     allFileNames.push(file.toString())\n//     let str = file.split(\":\")\n//     let top = parseInt(str[0][str[0].length-1])\n//     let bottom = parseInt(str[1][0])\n//     let dValue = [top,bottom]\n//     console.log(dValue)\n    \n//     // console.log(str.split())\n//     // allDominos.push(str)\n//     // console.log(allDominos)\n\n\n\n\n//     // arr = [3,1]\n//     // allDominos.forEach(domino => {\n//     // <Bone className=\"domino-size\" value={dValue} dValue={domino} src={dominoFile} draggable=\"true\" x={190}  />\n//     // })\n//   })\n//   debugger\n\n// // TEstbone.props.dValue ==> array [3,1]\n// //   console.log(newFileNames)\n// })\n\nexport default Board;","/Users/yangel/Desktop/capicua/capicua/frontend/src/classes/bone.js",[],["59","60"],"/Users/yangel/Desktop/capicua/capicua/frontend/src/components/allDominos.jsx",[],"/Users/yangel/Desktop/capicua/capicua/frontend/src/components/chatBox.jsx",["61"],"import React from \"react\";\nimport '../stylesheets/chatbox.css';\n//this where user input text press send button\n\nclass Chatbox extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    render(){\n        return(\n            <form className=\"form-container\">\n                <div className=\"textarea-button-container\">\n                    <textarea \n                    className=\"send-textarea\"\n                    placeholder=\"Type a message...\"\n                    >\n\n                    </textarea>\n                    <button className=\"send-button\">Send</button>\n                </div>\n            </form>\n        )\n    }\n}\nexport default Chatbox;\n","/Users/yangel/Desktop/capicua/capicua/frontend/src/index.js",[],{"ruleId":"62","severity":1,"message":"63","line":15,"column":13,"nodeType":"64","messageId":"65","endLine":15,"endColumn":14},{"ruleId":"62","severity":1,"message":"66","line":16,"column":13,"nodeType":"64","messageId":"65","endLine":16,"endColumn":14},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":21,"column":35,"nodeType":"73","messageId":"74","endLine":21,"endColumn":77},{"ruleId":"62","severity":1,"message":"75","line":8,"column":7,"nodeType":"64","messageId":"65","endLine":8,"endColumn":9},{"ruleId":"76","severity":1,"message":"77","line":15,"column":5,"nodeType":"78","messageId":"79","endLine":19,"endColumn":6},{"ruleId":"67","replacedBy":"80"},{"ruleId":"69","replacedBy":"81"},{"ruleId":"76","severity":1,"message":"77","line":6,"column":5,"nodeType":"78","messageId":"79","endLine":8,"endColumn":6},"no-unused-vars","'i' is defined but never used.","Identifier","unusedVar","'j' is defined but never used.","no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'fs' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["82"],["83"],"no-global-assign","no-unsafe-negation"]