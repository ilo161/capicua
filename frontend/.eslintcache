[{"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/index.js":"1","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/App.js":"2","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/game.jsx":"3","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/board.jsx":"4","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/bone.jsx":"5","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/allDominos.jsx":"6","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/board.js":"7","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/boneyard.js":"8","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/player.js":"9","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/bone.js":"10","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/hand.jsx":"11","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chatBox.jsx":"12"},{"size":490,"mtime":1608246770804,"results":"13","hashOfConfig":"14"},{"size":755,"mtime":1608252526548,"results":"15","hashOfConfig":"14"},{"size":780,"mtime":1608252526566,"results":"16","hashOfConfig":"14"},{"size":4524,"mtime":1608252526562,"results":"17","hashOfConfig":"14"},{"size":2611,"mtime":1608252526564,"results":"18","hashOfConfig":"14"},{"size":2969,"mtime":1607975641998,"results":"19","hashOfConfig":"14"},{"size":9799,"mtime":1608252526551,"results":"20","hashOfConfig":"14"},{"size":1632,"mtime":1607975641914,"results":"21","hashOfConfig":"14"},{"size":1369,"mtime":1607975641994,"results":"22","hashOfConfig":"14"},{"size":525,"mtime":1608246647278,"results":"23","hashOfConfig":"14"},{"size":1265,"mtime":1608252526569,"results":"24","hashOfConfig":"14"},{"size":675,"mtime":1608246770800,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1cdrc73",{"filePath":"29","messages":"30","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/index.js",[],["57","58"],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/App.js",["59","60","61"],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/game.jsx",["62"],"import React from \"react\";\nimport Board from \"./board\"\n\nconst BoardObject = require(\"../classes/board\")\nconst axiosPlayerObj = [{username: \"Steven\"}, {username: \"TinyPigOink!\"}]\n\nclass Game extends React.Component {\n    constructor(props){\n        super(props)\n        const board = new BoardObject(axiosPlayerObj)\n        this.state = {board: board}\n        // debugger\n        \n    }\n\n    componentDidMount(){\n        console.log(this.state.board)\n        debugger\n    }\n\n    updateGame(boneIndex, side) { {/* connected to Tile Component line 8 */}\n        \n        this.setState({ board: this.state.board });\n    }\n\n    render(){\n        \n\n        return (\n            <div className=\"board-container\">\n                <p>Hello World</p>\n                <Board board={this.state.board}/>\n            </div>\n        )\n    }\n\n}\n\nexport default Game;","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/board.jsx",["63"],"import React from \"react\";\nimport { Stage, Layer} from 'react-konva';\nimport Bone from \"./bone\"\n\nimport { allDominos } from \"./allDominos\"\n\n\nconst fs = require(\"fs\");\n// import useImage from 'use-image';\n\n\n\n\nclass Board extends React.Component {\n    constructor(props){\n        super(props)\n\n\n    }\n\n    componentDidMount(){\n        // this.getNums()\n    }\n\n    attachImages(){\n        // const\n    }\n\n    \n\n    render(){\n\n        const {board} = this.props;\n            // const bone1 =  <Bone src={allDominos[\"01\"]} x={200} y={100}/>\n            const allDominosArr = Object.values(allDominos);\n\n            const boneValToString = (boneVal) => {\n                let firstNumStr = boneVal[0].toString();\n                let secondNumStr = boneVal[1].toString();\n                let boneValStrA = firstNumStr + secondNumStr;\n                let boneValStrB = secondNumStr + firstNumStr;\n\n                // The Idea here is the Top num is always on the left even when\n                // rotated -90 Degrees.\n                // ~\n                // If the bone has been rotated then it is boneValStrB and we\n                // can add rotational Logic to the front End.\n                return [boneValStrA, boneValStrB]\n            }\n            \n            \n            const arena = board.arena.map(bone => {\n\n                let boneStrArr = boneValToString(bone.boneVal);\n            \n\n                if(bone.isDouble()){\n                    return <Bone src={allDominos[boneStrArr[0]]} />\n                }\n                else if(allDominosArr.includes(boneStrArr[0])){\n                    //rotate once -90 degrees\n                   return <Bone src={allDominos[boneStrArr[0]]} />\n                } else {\n                    //boneVal has been reversed. Rotate 90 Degrees\n                    return <Bone src={allDominos[boneStrArr[1]]} />\n                }\n\n            })\n\n           \n            // the arena is simple to show the current pieces in play\n        return(\n            <div>\n               <Stage className=\"board-game-container\" width={500} height={500}>\n                    <Layer>\n\n                        {arena}\n\n                    </Layer>\n                </Stage> \n            </div>\n        )\n    }\n}\n\n //         // <img src={process.env.PUBLIC_URL + 'images/profile.svg'} />\n            //     // return <Bone src={domino66}/>\n            //     // return <Bone key={`${bone.boneVal[0]}${bone.boneVal[1]}`} src={process.env.PUBLIC_URL +'images/dominos_pieces_vector_svg/dominos_bone_6:6.svg'}/>\n            //     // return <Bone key={`${bone.boneVal[0]}${bone.boneVal[1]}`} src={\"%PUBLIC_URL%/images/dominos_pieces_vector_svg/dominos_bone_6:6.svg\"}/>\n            // })\n\n\n\n\n\n\n// const dominoPathA = \"/Users/Phidias/Documents/aaobReact/MERN/dominos_pieces_vector-svg\"\n// const dominoPathB = \"../dominos_pieces_vector-svg\"\n\n\n// let allFileNames = []\n// let allDominos = []\n\n// fs.readdir(dominoPathA, (err, files) => {\n//   if (err) {\n//     console.error(\"Could not list the directory.\", err);\n//     process.exit(1);\n//   }\n  \n//   files.forEach(file => {\n//     allFileNames.push(file.toString())\n//     let str = file.split(\":\")\n//     let top = parseInt(str[0][str[0].length-1])\n//     let bottom = parseInt(str[1][0])\n//     let dValue = [top,bottom]\n//     console.log(dValue)\n    \n//     // console.log(str.split())\n//     // allDominos.push(str)\n//     // console.log(allDominos)\n\n\n\n\n//     // arr = [3,1]\n//     // allDominos.forEach(domino => {\n//     // <Bone className=\"domino-size\" value={dValue} dValue={domino} src={dominoFile} draggable=\"true\" x={190}  />\n//     // })\n//   })\n//   debugger\n\n// // TEstbone.props.dValue ==> array [3,1]\n// //   console.log(newFileNames)\n// })\n\nexport default Board;","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/bone.jsx",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/allDominos.jsx",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/board.js",["64","65"],"const Boneyard = require(\"./boneyard\")\nconst Player = require(\"./player\")\n\nclass Board {\n    constructor(axiosPlayerData){\n        this.boneyard = new Boneyard(this);\n        this.arena = [];\n        this.players = this.generatePlayers(axiosPlayerData);\n        this.currentPlayer = undefined;\n        this.aIFirstMove = undefined;\n\n        this.inSession = true;\n        this.runningGame()\n\n\n    }\n\n    //axiosPlayerData comes in as in Array\n    generatePlayers(axiosPlayerData){\n        const players = axiosPlayerData.map((playerData) => {\n\n            if (playerData.isAI){\n                return new Player(playerData.username, this, true );\n            }\n            return new Player(playerData.username, this );\n        })\n\n        return players\n    }\n\n    init(){\n        //distribute 7 bones to each player\n        this.startingHand();\n\n        // if boneyard has all 7 double Dominos. create new Boneyard obj\n        if (this.sevenDoubles()){\n            this.restartBoneYard();\n            this.init();\n        }\n\n        //set the currentPlayer to...\n        // returns playerIdx => boneIdxInHandOfDouble\n        let playerAndBoneIdx = this.decideFirstPlayer();\n\n        //check if player is AI\n        if (this.players[playerAndBoneIdx[0]].isAI){\n            // ****************\n            // ****************\n            // ****************\n            //works...\n        }\n\n        return playerAndBoneIdx\n\n\n\n    }\n\n    /*\n    ********************************INITIALIZE BOARD FUNCTIONS START HERE**************\n    ********************************INITIALIZE BOARD FUNCTIONS START HERE**************\n    ********************************INITIALIZE BOARD FUNCTIONS START HERE**************\n    ********************************INITIALIZE BOARD FUNCTIONS START HERE**************\n    ********************************INITIALIZE BOARD FUNCTIONS START HERE**************\n    */\n\n    restartBoneYard(){\n\n        //empty boneyard and make new bones\n        this.boneyard = new Boneyard(this);\n    }\n\n    startingHand(){\n        //this function will iterate through the players in the game \n        // and distribute 7 bones to each player at random\n\n        this.players.forEach((player) => {\n            player.hand = [];\n\n            for(let i = 0; i < 7; i++){  \n                player.hand.push(this.boneyard.bones.pop());\n            }\n            \n            \n            //TESTING ONLY -- DELETE FOR PRODUCTION\n            console.log(`${player.username} below`)\n                player.hand.forEach(boneObj => {\n                    console.log(boneObj.boneVal);\n                })\n        });\n    }\n\n    //Checks to make sure at least one player has one double\n    sevenDoubles() {\n        let doubleBoneCounter = 0;\n        this.boneyard.bones.forEach(boneObj => {\n            if (boneObj.isDouble()) {\n                doubleBoneCounter++;\n            }\n        })\n        return doubleBoneCounter === 7 ? true : false;\n    }\n\n    decideFirstPlayer(){\n        //Automatically pick lowest Double Domino with => playerIdx => boneIdxInHand\n        let playerWithHighestDouble = ([[0, 0], null, null]);\n\n        this.players.forEach((player, playerIdx) => {\n            player.hand.forEach((bone, boneIdx) => {\n                // test only doubles\n                if (bone.isDouble()){\n                    playerWithHighestDouble = this.highestDouble(bone,\n                        playerWithHighestDouble,\n                        playerIdx,\n                        boneIdx)\n                    }\n                })\n            })\n\n        this.currentPlayer = this.players[playerWithHighestDouble[1]]\n\n        //                  => playerIdx => boneIdxInHand\n        return [playerWithHighestDouble[1], playerWithHighestDouble[2]]\n\n    }\n\n    highestDouble(bone, currentHigh, currentPlayerIdx, boneIdx) {\n\n      if (bone.topNumber >= currentHigh[0][0]){\n        currentHigh = ([bone.boneVal, currentPlayerIdx, boneIdx]);\n        return currentHigh;\n      }\n      return currentHigh;\n    }\n\n    /*\n    ********************************INITIALIZE BOARD FUNCTIONS END HERE**************\n    ********************************INITIALIZE BOARD FUNCTIONS END HERE**************\n    ********************************INITIALIZE BOARD FUNCTIONS END HERE**************\n    ********************************INITIALIZE BOARD FUNCTIONS END HERE**************\n    ********************************INITIALIZE BOARD FUNCTIONS END HERE**************\n    */\n\n\n\n    /*\n    ********************************RUNNING GAMEPLAY FUNCTIONS START HERE**************\n    ********************************RUNNING GAMEPLAY FUNCTIONS START HERE**************\n    ********************************RUNNING GAMEPLAY FUNCTIONS START HERE**************\n    ********************************RUNNING GAMEPLAY FUNCTIONS START HERE**************\n    ********************************RUNNING GAMEPLAY FUNCTIONS START HERE**************\n    */\n\n    //Ensures currentPlayer plays highest Double\n    firstMoveAndCorrectBone(mandatoryBoneIdxToPlay){\n        this.arena.push(this.currentPlayer.hand.splice(mandatoryBoneIdxToPlay[1],1)[0]);\n        this.renderArena();\n    }\n\n    runningGame(){\n         const mandatoryBoneIdxToPlay = this.init()\n         this.firstMoveAndCorrectBone(mandatoryBoneIdxToPlay)\n\n    }\n\n    //Changes currentPlayer to the next player\n    nextPlayerAssignTurn(){\n       \n        let idxCurrPlayer ;\n        idxCurrPlayer = this.players.indexOf(this.currentPlayer)   \n\n\n        this.currentPlayer = this.players[((idxCurrPlayer + 1) % this.players.length)]\n\n        console.log(\"NEW CURRENT PLAYER\");\n        console.log(this.currentPlayer.username);\n        this.currentPlayer.revealHand()\n        console.log(\"*************\");\n    }\n\n    makeMove(xPos, center, bone){\n\n        // extracting the far left number on the arena\n        const arenaLeftBoneVal = this.arena[0].boneVal[0];\n        // extracting the far right number on the arena\n        const arenaRightBoneVal = this.arena[this.arena.length-1].boneVal[1];\n        \n        // Player plays left side\n        if(xPos < center){\n            //we use this return of play in update Game in Game.jsx\n           return this.playerPlaysLeft(arenaLeftBoneVal, bone);\n        } else {\n            // Player plays right side\n            return this.playerPlaysRight(arenaRightBoneVal, bone)\n\n        }\n    }\n\n    playerPlaysLeft(arenaLeftBoneVal, bone){\n        //check bottom number of player hand bone first\n        // second test checks top number of player hand bone second\n        if(bone.boneVal[1] != arenaLeftBoneVal && bone.boneVal[0] === arenaLeftBoneVal){\n            bone.boneReverse();\n            this.arena.unshift(bone);\n            console.log(\"played left successfully\");\n            console.log(\"rotate SVG -90 degrees\");\n\n            return true;\n        } else if(bone.boneVal[1] === arenaLeftBoneVal){\n            //bone bottom val playable on left - as is. just rotate svg -90\n            this.arena.unshift(bone);\n            console.log(\"played left successfully\");\n            console.log(\"rotate SVG -90 degrees\");\n\n            return true;\n        } else {\n            // left play not playable - make player draw\n            //******************************* */\n            //******************************* */\n            //******************************* */\n            return false\n        }\n    }\n\n    playerPlaysRight(arenaRightBoneVal, bone){\n        if(bone.boneVal[0] != arenaRightBoneVal && bone.boneVal[1] === arenaRightBoneVal){\n                bone.boneReverse();\n                this.arena.push(bone);\n                console.log(\"played right successfully\");\n                console.log(\"rotate SVG -90 degrees\");\n\n                return true;\n            } else if(bone.boneVal[0] === arenaRightBoneVal){\n                this.arena.push(bone);\n                console.log(\"played right successfully\");\n                console.log(\"rotate SVG -90 degrees\");\n\n                return true;\n            } else {\n                // right play not playable - make player draw\n                //******************************* */\n                //******************************* */\n                //******************************* */\n                return false;\n            }\n    }\n\n    /*\n    ********************************RUNNING GAMEPLAY FUNCTIONS END HERE**************\n    ********************************RUNNING GAMEPLAY FUNCTIONS END HERE**************\n    ********************************RUNNING GAMEPLAY FUNCTIONS END HERE**************\n    ********************************RUNNING GAMEPLAY FUNCTIONS END HERE**************\n    ********************************RUNNING GAMEPLAY FUNCTIONS END HERE**************\n    */\n\n    //Might need AI CLASS of PLAYER\n    firstMoveAI(){\n\n    }\n\n    //Renders Arena for Terminal\n    renderArena(){\n        if (this.arena.length === 0){\n\n            console.log(\"THE~~~ARENA\");\n            console.log(\"[]\");\n            return \"[]\"\n\n        }else{\n            let arenaString = \"\"\n\n            console.log(\"THE~~~ARENA\");\n\n            this.arena.forEach(bone => {\n                arenaString += `[${bone.boneVal[0]}, ${bone.boneVal[1]}], `\n            })\n\n            console.log(`${arenaString}`)\n\n            // return this.arena.map((bone) => {\n            //     return bone.boneVal;\n            // })\n\n\n        }\n        // this.currentPlayer.getPlayerInput()\n    }\n\n}\n// one player\n// let axiosPlayerObj = [{username: \"Steven\"}]\n\n\n//Two players - without AI\n// let axiosPlayerObj = [{username: \"Steven\"}, {username: \"TinyPigOink!\"}]\n\n//with AI\n// let axiosPlayerObj = [{username: \"Steven\"}, {username: \"TinyPigOink!\"}, {username: \"Robot!\", isAI: true } ]\n// let axiosPlayerObj = [{username: \"TinyPigOink!\"}]\n// let b1 = new Board(axiosPlayerObj)\n\n\nmodule.exports = Board;","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/boneyard.js",["66","67"],"const Bone = require(\"./bone.js\")\n\n\nclass Boneyard {\n    constructor(board){\n        this.bones = this.generateBoneyard()\n        this.shuffleBoneYard(this.bones)\n        \n    }\n\n    //Function generates a 2 length string of Integer values that match the face of a Domino/Bone\n    getUniqueDominoNums(){\n        let dominoStrs = []\n\n        let i;\n        let j;\n        for (let i = 0; i < 7; i++) {\n            for (let j = i; j < 7; j++) {\n                dominoStrs.push(`${i}${j}`)\n            }\n        }\n\n        return dominoStrs\n    }\n\n    // Function generates an array of objects. Objects are Bone Objects from Bone.js. 28 total\n    generateBoneyard(){\n        let allBones;\n        let dominoNums = this.getUniqueDominoNums()\n\n        allBones = dominoNums.map((numberPair, idx) => {\n            return new Bone([parseInt(numberPair[0]),  parseInt(numberPair[1])])\n        })\n\n        return allBones\n    }\n\n\n    //Shuffles existing boneyard so that it is random. All 28\n    shuffleBoneYard(allBones){\n\n            for(let i = allBones.length - 1; i > 0; i--){\n                const randomMathFloorIdx = Math.floor(Math.random() * i)\n                const lastIdx = allBones[i]\n                const temp = allBones[randomMathFloorIdx]  \n                allBones[i] = temp;\n                allBones[randomMathFloorIdx] = lastIdx\n            }\n                return allBones\n    }\n\n    isEmpty(){\n        if (this.bones.length === 0){\n            return true\n        }\n        return false\n    }\n\n    // draws last bone from boneyard\n    draw(){\n        return this.bones.pop()\n    }\n\n\n    \n}\nmodule.exports = Boneyard\n\n","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/player.js",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/classes/bone.js",[],"/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/hand.jsx",["68"],"import React from \"react\";\n\nimport {Group} from 'react-konva';\n// import useImage from 'use-image';\nimport Bone from \"./bone\"\n\n\n\nclass Hand extends React.Component {\n    // constructor(props){\n    //     super(props)\n\n\n\n    // }\n\n    render(){\n        const {board, allDominos, boneValToString, offSetCenter} = this.props;\n\n        // this will need to be changed to the axios player ID. \n        // SOLELY FOR TESTING...\n        let renderedHand = [];\n\n        if (board){\n            debugger\n            renderedHand = board.currentPlayer.hand.map((bone,idx) => {\n               // [\"34\"]\n               const singleBoneVal =  boneValToString(bone.boneVal)[0]\n               const reactKeyVal = parseInt(singleBoneVal)\n               const initialX = 0;\n\n               //width of domino plus spacing\n               const width = 30 + 10;\n\n                const pos = initialX + (width * idx);\n\n                return <Bone \n                x={pos} \n                offSetCenter={offSetCenter}\n                draggable={true}\n                key={reactKeyVal}\n                src={allDominos[singleBoneVal]}/>    \n            })\n        }\n         return(\n                   <>          \n                 {renderedHand}\n                </>\n         )\n\n    }\n\n}\nexport default Hand;","/Users/Phidias/Documents/aaobReact/capicua_git/capicua/frontend/src/components/chatBox.jsx",["69"],"import React from \"react\";\nimport '../stylesheets/chatbox.css';\n//this where user input text press send button\n\nclass Chatbox extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    render(){\n        return(\n            <form className=\"form-container\">\n                <div className=\"textarea-button-container\">\n                    <textarea \n                    className=\"send-textarea\"\n                    placeholder=\"Type a message...\"\n                    >\n\n                    </textarea>\n                    <button className=\"send-button\">Send</button>\n                </div>\n            </form>\n        )\n    }\n}\nexport default Chatbox;\n",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":2,"message":"75","line":12,"column":3,"nodeType":"76","messageId":"77","endLine":12,"endColumn":6},{"ruleId":"74","severity":2,"message":"78","line":12,"column":11,"nodeType":"76","messageId":"77","endLine":12,"endColumn":18},{"ruleId":"74","severity":2,"message":"75","line":13,"column":3,"nodeType":"76","messageId":"77","endLine":13,"endColumn":6},{"ruleId":"79","severity":1,"message":"80","line":21,"column":35,"nodeType":"81","messageId":"82","endLine":21,"endColumn":77},{"ruleId":"83","severity":1,"message":"84","line":10,"column":5,"nodeType":"85","messageId":"86","endLine":14,"endColumn":6},{"ruleId":"87","severity":1,"message":"88","line":202,"column":28,"nodeType":"89","messageId":"90","endLine":202,"endColumn":30},{"ruleId":"87","severity":1,"message":"88","line":226,"column":28,"nodeType":"89","messageId":"90","endLine":226,"endColumn":30},{"ruleId":"91","severity":1,"message":"92","line":15,"column":13,"nodeType":"76","messageId":"93","endLine":15,"endColumn":14},{"ruleId":"91","severity":1,"message":"94","line":16,"column":13,"nodeType":"76","messageId":"93","endLine":16,"endColumn":14},{"ruleId":"91","severity":1,"message":"95","line":3,"column":9,"nodeType":"76","messageId":"93","endLine":3,"endColumn":14},{"ruleId":"83","severity":1,"message":"84","line":6,"column":5,"nodeType":"85","messageId":"86","endLine":8,"endColumn":6},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-undef","'app' is not defined.","Identifier","undef","'express' is not defined.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'i' is defined but never used.","unusedVar","'j' is defined but never used.","'Group' is defined but never used.","no-global-assign","no-unsafe-negation"]